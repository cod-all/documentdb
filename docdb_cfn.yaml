---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the infrastructure for an Amazon DocumentDB cluster, as well as Alarms for failed logins.

Parameters:

  DocDBUsername:
    Type: String
    Description: Username (Amazon DocumentDB)

  DocDBPassword:
    Type: String
    Description: Password (Amazon DocumentDB)
    NoEcho: true
    MinLength: 8

  DocDBInstanceType:
    Type: String
    Description: Instance type for DocumentDB cluster
    Default: db.t3.medium
    AllowedValues:
      - db.t3.medium
      - db.r5.large

  IdeType:
    Type: String
    Description: Instance type for Cloud9 IDE
    Default: "t3.medium"
    
  SNSEmailAddress:
    Type: String
    Description: Email address for SNS notifications (name@example.com)
    
    
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "DocumentDB Configuration"
        Parameters: 
          - DocDBInstanceType
          - DocDBUsername
          - DocDBPassword

    ParameterLabels: 
      DocDBInstanceType: 
        default: "Instance type for Amazon DocumentDB cluster"
      DocDBUsername: 
        default: "Amazon DocumentDB master username"
      DocDBPassword: 
        default: "Amazon DocumentDB master password"
      SNSEmailAddress:
        default: "SNS notification email address"
        
Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PublicThree:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'
    PrivateTwo:
      CIDR: '10.0.101.0/24'
    PrivateThree:
      CIDR: '10.0.102.0/24'

Resources:
# Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicOne

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicTwo

  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicThree

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateOne

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateTwo

  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateThree

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
  
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIPgw1
  
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIPgw2
  
  NatGatewayThreeAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIPgw3
  
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT1
  
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT2
  
  NatGatewayThree:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId
      SubnetId: !Ref PublicSubnetThree
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT3
  
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable1
  
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable2
  
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo
  
  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable3
  
  PrivateRouteThree:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayThree
  
  PrivateRouteTableThreeAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      SubnetId: !Ref PrivateSubnetThree

# DocumentDB
  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Amazon DocumentDB Security Group
      GroupName: !Sub ${AWS::StackName}-SG-DocumentDB
      VpcId: !Ref VPC
      SecurityGroupIngress:
         - IpProtocol: tcp
           CidrIp: 10.0.0.0/16
           FromPort: 27017
           ToPort: 27017
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-DocumentDB
 
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for DocumentDB
      DBSubnetGroupName: !Sub ${AWS::StackName}-SG-DocumentDB
      SubnetIds: 
         - !Ref PrivateSubnetOne
         - !Ref PrivateSubnetTwo
         - !Ref PrivateSubnetThree
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-DocumentDB

  DBClusterParameterGroup:
    Type: AWS::DocDB::DBClusterParameterGroup
    Properties: 
      Description: Custom Parameter Group
      Family: docdb4.0
      Name: customParameterGroup
      Parameters: 
        audit_logs: enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-DocumentDB
  
  DocumentDBCluster:  
    Type: AWS::DocDB::DBCluster
    Properties: 
      DBClusterIdentifier: !Sub ${AWS::StackName}-DocumentDB
      DBClusterParameterGroupName : !Ref DBClusterParameterGroup
      MasterUsername: !Ref DocDBUsername
      MasterUserPassword: !Ref DocDBPassword
      DBSubnetGroupName : !Ref DocumentDBSubnetGroup
      StorageEncrypted: yes
      EngineVersion: 4.0.0
      EnableCloudwatchLogsExports: 
        - audit
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDB
      VpcSecurityGroupIds: 
        - !Ref DocumentDBSecurityGroup
    DependsOn: 
      - VPC

  DocumentDBInstance1: 
    Type: AWS::DocDB::DBInstance
    Properties: 
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: !Ref DocDBInstanceType
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDBInstance1

  DocumentDBInstance2: 
    Type: AWS::DocDB::DBInstance
    Properties: 
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: !Ref DocDBInstanceType
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDBInstance2

  DocumentDBInstance3: 
    Type: AWS::DocDB::DBInstance
    Properties: 
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: !Ref DocDBInstanceType
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDBInstance3

#Cloud9
  Ide:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      Description: "Cloud 9 IDE"
      InstanceType: !Ref IdeType
      SubnetId: !Ref PublicSubnetOne
      Tags: 
        - Key: EnvName
          Value: !Sub ${AWS::StackName}-IDE

#CloudWatch
  DocDBLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', ['/aws/docdb/', { "Ref": "AWS::StackName"},'-documentdb/audit']]
      RetentionInDays: 365

  LogicMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref DocDBLogGroup
      FilterPattern: '{ $.param.message = "Authentication failure" }'
      MetricTransformations: 
        - 
          DefaultValue: "0"
          MetricValue: "1"
          MetricNamespace: "DocumentDBClusterFailedLogin"
          MetricName: "DocDBFailedLogin"
    DependsOn: 
      - DocumentDBCluster
      - DocDBLogGroup

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DocumentDBTopic
      TopicName: DocumentDBTopic
      Subscription:
        - Endpoint: !Ref SNSEmailAddress
          Protocol: email

  FailedLoginAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert on failed DocumentDB logins 
      MetricName: DocDBFailedLogin
      Namespace: DocumentDBClusterFailedLogin
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      AlarmActions:
        - Ref: MySNSTopic
      TreatMissingData: notBreaching
      ComparisonOperator: GreaterThanThreshold 
    DependsOn: 
      - LogicMetricFilter
      - MySNSTopic
  

Outputs:
  StackName:
    Value: !Sub ${AWS::StackName}
  VpcId:
    Value: !Ref VPC
  PrivateSubnetOne:
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwo:
    Value: !Ref PrivateSubnetTwo
  PrivateSubnetThree:
    Value: !Ref PrivateSubnetThree
  PublicSubnetOne:
    Value: !Ref PublicSubnetOne
  PublicSubnetTwo:
    Value: !Ref PublicSubnetTwo
  PublicSubnetThree:
    Value: !Ref PublicSubnetThree
  DocumentDBClusterName:
    Value: !Ref DocumentDBCluster
  DocumentDBCluster:
    Value: !GetAtt DocumentDBCluster.Endpoint